Завдання 2. Порівняння продуктивності обчислення чисел Фібоначчі із використанням LRU-кешу та Splay Tree 

import timeit
import matplotlib.pyplot as plt
from functools import lru_cache

# Реалізація Fibonacci з LRU Cache
@lru_cache(maxsize=None)
def fibonacci_lru(n):
    if n < 2:
        return n
    return fibonacci_lru(n - 1) + fibonacci_lru(n - 2)

# Реалізація простого Splay Tree для кешування Fibonacci
class SplayNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.left = self.right = None

class SplayTree:
    def __init__(self):
        self.root = None

    def _right_rotate(self, x):
        y = x.left
        x.left = y.right
        y.right = x
        return y

    def _left_rotate(self, x):
        y = x.right
        x.right = y.left
        y.left = x
        return y

    def splay(self, root, key):
        if root is None or root.key == key:
            return root
        if key < root.key:
            if root.left is None:
                return root
            if key < root.left.key:
                root.left.left = self.splay(root.left.left, key)
                root = self._right_rotate(root)
            elif key > root.left.key:
                root.left.right = self.splay(root.left.right, key)
                if root.left.right:
                    root.left = self._left_rotate(root.left)
            return root if root.left is None else self._right_rotate(root)
        else:
            if root.right is None:
                return root
            if key > root.right.key:
                root.right.right = self.splay(root.right.right, key)
                root = self._left_rotate(root)
            elif key < root.right.key:
                root.right.left = self.splay(root.right.left, key)
                if root.right.left:
                    root.right = self._right_rotate(root.right)
            return root if root.right is None else self._left_rotate(root)

    def get(self, key):
        self.root = self.splay(self.root, key)
        if self.root and self.root.key == key:
            return self.root.value
        return None

    def insert(self, key, value):
        if self.root is None:
            self.root = SplayNode(key, value)
            return
        self.root = self.splay(self.root, key)
        if key < self.root.key:
            node = SplayNode(key, value)
            node.right = self.root
            node.left = self.root.left
            self.root.left = None
            self.root = node
        elif key > self.root.key:
            node = SplayNode(key, value)
            node.left = self.root
            node.right = self.root.right
            self.root.right = None
            self.root = node

# Fibonacci з використанням Splay Tree
def fibonacci_splay(n, tree):
    cached = tree.get(n)
    if cached is not None:
        return cached
    if n < 2:
        result = n
    else:
        result = fibonacci_splay(n - 1, tree) + fibonacci_splay(n - 2, tree)
    tree.insert(n, result)
    return result

# Вимірювання часу виконання
numbers = list(range(0, 951, 50))
lru_times = []
splay_times = []

for n in numbers:
    lru_time = timeit.timeit(lambda: fibonacci_lru(n), number=10) / 10
    tree = SplayTree()
    splay_time = timeit.timeit(lambda: fibonacci_splay(n, tree), number=10) / 10

    lru_times.append(lru_time)
    splay_times.append(splay_time)

# Вивід таблиці результатів
print(f"{'n':<10}{'LRU Cache Time (s)':<22}{'Splay Tree Time (s)':<20}")
print('-' * 52)
for n, lru_t, splay_t in zip(numbers, lru_times, splay_times):
    print(f"{n:<10}{lru_t:<22.8f}{splay_t:<20.8f}")

# Побудова графіка
plt.figure(figsize=(10, 6))
plt.plot(numbers, lru_times, marker='o', label='LRU Cache')
plt.plot(numbers, splay_times, marker='x', label='Splay Tree')

plt.title('Порівняння продуктивності обчислення чисел Фібоначчі')
plt.xlabel('Номер числа Фібоначчі (n)')
plt.ylabel('Середній час виконання (секунди)')
plt.legend()
plt.grid(True)
plt.show()





  n         LRU Cache Time (s)    Splay Tree Time (s) 
----------------------------------------------------
0         0.00000059            0.00000156          
50        0.00000543            0.00000826          
100       0.00000195            0.00004070          
150       0.00000211            0.00004003          
200       0.00000219            0.00004285          
250       0.00000188            0.00006076          
300       0.00000283            0.00006977          
350       0.00000299            0.00008680          
400       0.00000262            0.00009773          
450       0.00000225            0.00011369          
500       0.00000475            0.00011406          
550       0.00000479            0.00014984          
600       0.00000334            0.00014604          
650       0.00000525            0.00015081          
700       0.00000329            0.00017890          
750       0.00000222            0.00017500          
800       0.00000245            0.00019189          
850       0.00000935            0.00027875          
900       0.00000331            0.00024480          
950       0.00000233            0.00029759          
