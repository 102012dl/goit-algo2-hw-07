Завдання 1. Оптимізація доступу до даних за допомогою LRU-кешу

import random
import time
from functools import lru_cache

# Функції без кешування
def range_sum_no_cache(array, L, R):
    return sum(array[L:R+1])

def update_no_cache(array, index, value):
    array[index] = value

# Функції з використанням LRU-кешу
@lru_cache(maxsize=1000)
def range_sum_with_cache(L, R):
    return sum(array[L:R+1])

def update_with_cache(array, index, value):
    array[index] = value
    range_sum_with_cache.cache_clear()  # очищення кешу після оновлення

# Генерація тестових даних
array_size = 100_000
query_count = 50_000

array = [random.randint(1, 100) for _ in range(array_size)]

queries = []
for _ in range(query_count):
    if random.choice(['Range', 'Update']) == 'Range':
        L = random.randint(0, array_size - 1)
        R = random.randint(L, array_size - 1)
        queries.append(('Range', L, R))
    else:
        index = random.randint(0, array_size - 1)
        value = random.randint(1, 100)
        queries.append(('Update', index, value))

# Виконання та вимірювання часу без кешування
start_time = time.time()
for query in queries:
    if query[0] == 'Range':
        range_sum_no_cache(array, query[1], query[2])
    else:
        update_no_cache(array, query[1], query[2])
time_no_cache = time.time() - start_time

# Виконання та вимірювання часу з кешуванням
start_time = time.time()
for query in queries:
    if query[0] == 'Range':
        range_sum_with_cache(query[1], query[2])
    else:
        update_with_cache(array, query[1], query[2])
time_with_cache = time.time() - start_time

# Вивід результатів
print(f"Час виконання без кешування: {time_no_cache:.2f} секунд")
print(f"Час виконання з LRU-кешем: {time_with_cache:.2f} секунд")







Час виконання без кешування: 6.92 секунд
Час виконання з LRU-кешем: 5.70 секунд 
